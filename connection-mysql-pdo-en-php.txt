
Se connecter à MySQL avec PDO en PHP 
(la connexion à la base de données n'a besoin d'être faite qu'une seule fois, au début de la page)
------------------------------------
Vous noterez que l'on ne se connecte à la base de données qu'une fois par page. 
Pas besoin donc de se connecter à nouveau pour effectuer d'autres requêtes.

Après avoir vérifier que PDO est activé (dans le fichier php.ini), nous pouvons alors nous connecter à MySQL. 

Rappel : PDO est ce qu'on appelle une extension orientée objet. 
	 -----------------------------------------------------

Nous allons avoir besoin de quatre renseignements pour nous connecter :
---------------------------------------------------------------------
le nom de l'hôte 	: c'est l'adresse de l'ordinateur où MySQL est installé (comme une adresse IP). 
----------------
			  Le plus souvent, MySQL est installé sur le même ordinateur que PHP : 
			  dans ce cas, mettez la valeur localhost (cela signifie « sur le même ordinateur »). 
			  
			  Néanmoins, il est possible que votre hébergeur web vous indique une autre valeur à renseigner 
			  (qui ressemblerait à ceci : sql.hebergeur.com). 

			  Dans ce cas, il faudra modifier cette valeur lorsque vous enverrez votre site sur le Web ;

			  Ce premier paramètre (qui commence par mysql) s'appelle le DSN : 
			  ---------------------------------------------------------------
			  Data Source Name. C'est généralement le seul qui change en fonction du type de base de données auquel on se connecte.


la base 		: c'est le nom de la base de données à laquelle vous voulez vous connecter. 
-------	
			  par exemple, la base s'appelle test. 


le login 		: il permet de vous identifier. 
--------
			  Renseignez-vous auprès de votre hébergeur pour le connaître. 
			  Le plus souvent (chez un hébergeur gratuit), c'est le même login que vous utilisez pour le FTP ;


le mot de passe 	: il y a des chances pour que le mot de passe soit le même que celui que vous utilisez pour accéder au FTP. 
---------------		  Renseignez-vous auprès de votre hébergeur.

en local
--------
Lorsque vous faite des tests sur votre ordinateur à la maison. 
On dit que vous travaillez « en local ». 

	Par conséquent, le nom de l'hôte sera 	: localhost
	                   -------------
	Quant au login par défaut le login est 	: root
		 -----  
	et mot de passe en fonction du package installé wamp, xamp ou autres : 	
	- soit il n'y a pas de mot de passe sous WAMP (sur windows)
	- soit le mot de passe est "root" sous MAMP (sur Mac)

	CODE de connexion en Local :
	----------------------------
		Penser à toujours Tester la présence d'erreurs avec le try et cath
		------------------------------------------------------------------
		s'il y a une erreur, PHP risque d'afficher toute la ligne qui pose l'erreur, ce qui inclut le mot de passe !
	
		Vous ne voudrez pas que vos visiteurs puissent voir le mot de passe si une erreur survient lorsque votre site est en 			ligne. 
		
		Il est préférable de traiter l'erreur. 

		En cas d'erreur, PDO renvoie ce qu'on appelle une exception qui permet de « capturer » l'erreur.

		Voici le code de connexion avec gestion d'erreurs :
		-------------------------------------------------
			
		<?php
			
			try
			{
			 	$bdd = new PDO('mysql:host=localhost;dbname=test;charset=utf8', 'root', '');
			}
			catch (Exception $e)
			{
				die('Erreur : ' . $e->getMessage());
			}
			
		?>

		try
		---
		PHP essaie d'exécuter les instructions à l'intérieur du bloc try. 

		S'il y a une erreur, il rentre dans le bloc catch
		-------------------------------------------------
		et fait ce qu'on lui demande (ici, on arrête l'exécution de la page en affichant un message décrivant l'erreur).
		(rappel : la fonction die : Print a message and exit the current script)
			
		Si au contraire tout se passe bien, PHP poursuit l'exécution du code et ne lit pas ce qu'il y a dans le bloc catch.

		rappel sur la gestion des exceptions :
		------------------------------------
		fonctionne uiquement sur du code orienté objet.
		comme par exemple sur PDO (car PDO est orienté objet, puisque $bdd = new PDO... crée un objet $bdd...
			
en prod
-------
	paramètre: mysql:host=	--> voir les données de connections avec votre hébergeur
	----------------------
		en prod mettre ip ou nom du serveur hébergeur.
	
		Remarque:
		--------
		Votre serveur de base de donnée est sur le même machine que votre serveur web hébergeur.
		Vous devez donc mettre localhost comme nom de serveur. 
		à vérifier avec l'hebergeur s'il ne faut pas mettre autre chose que localhost !

	paramètre du login :
	------------------
		en prod mettre le nom du user que vous avez créée dans la DB Mysql avec ses droit limités.

	paramètre du mot de passe :
	-------------------------
		en prod mettre le mot de passe du user créée de la DB Mysql.

------------------
Remarque Objet PDO
------------------

$bdd est un objet
La ligne de code :	$bdd = new PDO('mysql:host=localhost;dbname=test;charset=utf8', 'root', ''); 
----------------
Crée ce qu'on appelle un objet $bdd. 

Ce n'est pas vraiment une variable (même si ça y ressemble fortement) : c'est un objet 
--------------------------------------------------------------------------------------
qui représente la connexion à la base de données. 

On crée la connexion en indiquant dans l'ordre dans les paramètres :
- le nom d'hôte;
- le nom de la base de données;
- le login;
- le mot de passe.

rem : Créer qu'une seul fois la connection dans un scrip : 
--------------------------------------------------------
et pour pouvoir accéder à la variable objet de connexion pour ses futures requêtes, depuis une fonction par exemple,

	soit utiliser la façon non orienté objet : 
	----------------------------------------
	global $bdd; 	// dans la fonction
			// Cela nous évite d'avoir à recréer une connexion à la base de données dans chaque fonction, 
			// ce qui serait très mauvais pour les performances du site (et très laid dans le code !).


	soit utiliser la façon POO avec la mise en place d'une classe respectant le desing pateern singleton : 
	-----------------------------------------------------------------------------------------------------
	Il existe une meilleure méthode pour récupérer l'objet $bdd et qui est basée sur le design pattern singleton. 

	Elle consiste à créer une classe qui retourne toujours le même objet. 

	voir le cours PHP POO :
	http://www.apprendre-php.com/tutoriels/tutoriel-45-singleton-instance-unique-d-une-classe.html
